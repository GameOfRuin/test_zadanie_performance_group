import {
  Body,
  Controller,
  Delete,
  Get,
  Param,
  Post,
  Put,
  Query,
  Req,
  UseGuards,
} from '@nestjs/common';
import {
  ApiBearerAuth,
  ApiCreatedResponse,
  ApiForbiddenResponse,
  ApiNotFoundResponse,
  ApiOkResponse,
  ApiOperation,
} from '@nestjs/swagger';
import { FastifyRequest } from 'fastify';
import { JwtGuard, OptinolJwtGuard } from '../../guards/jwt.guard';
import { IdNumberDto } from '../../shared';
import { ArticleService } from './article.service';
import { ArticleAllFindDto, ArticleResponseDto, CreateArticleDto } from './dto';
import { ArticleUpdateDto } from './dto/article-update.dto';

@Controller('article')
export class ArticleController {
  constructor(private readonly articleService: ArticleService) {}

  @ApiBearerAuth()
  @UseGuards(JwtGuard)
  @ApiCreatedResponse({
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é',
    type: ArticleResponseDto,
  })
  @ApiOperation({ summary: '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏' })
  @Post('create')
  async creatArticle(@Body() dto: CreateArticleDto, @Req() request: FastifyRequest) {
    return this.articleService.creatArticle(dto, request.user);
  }

  @ApiBearerAuth()
  @ApiOkResponse({
    description: '–°—Ç–∞—Ç—å—è –Ω–∞–π–¥–µ–Ω–∞',
    type: ArticleResponseDto,
  })
  @ApiNotFoundResponse({ description: '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' })
  @UseGuards(OptinolJwtGuard)
  @Get('/:id')
  async getArticleById(@Param() { id }: IdNumberDto, @Req() request: FastifyRequest) {
    const userId = request.user?.id;
    return await this.articleService.getArticleById(id, userId);
  }

  @ApiBearerAuth()
  @UseGuards(JwtGuard)
  @ApiOperation({ summary: 'üóë –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏' })
  @ApiOkResponse({ description: '–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' })
  @ApiForbiddenResponse({ description: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏' })
  @Delete('/:id')
  async delete(@Req() request: FastifyRequest, @Param() { id }: IdNumberDto) {
    return this.articleService.delete(request.user.id, id);
  }

  @ApiBearerAuth()
  @UseGuards(JwtGuard)
  @ApiCreatedResponse({ type: ArticleResponseDto })
  @ApiOperation({ summary: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏' })
  @ApiOkResponse({
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é',
    type: ArticleResponseDto,
  })
  @Put('/:id')
  async updateArticle(
    @Body() dto: ArticleUpdateDto,
    @Req() request: FastifyRequest,
    @Param() { id }: IdNumberDto,
  ) {
    return await this.articleService.updateArticle(dto, request.user.id, id);
  }

  @ApiBearerAuth()
  @UseGuards(OptinolJwtGuard)
  @ApiOkResponse({
    description: '–°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π',
    type: ArticleResponseDto,
  })
  @ApiOperation({ summary: '–ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π' })
  @Get('/')
  async getAllArticle(@Req() request: FastifyRequest, @Query() query: ArticleAllFindDto) {
    const userId = request.user?.id;
    return await this.articleService.getAllArticle(query, userId);
  }
}
